# File: modules/generation.py

from openai import OpenAI
import os
import requests  # We need the requests library for the image API call
import time
from dotenv import load_dotenv

load_dotenv()


def prompt_orchestrator(topic: str, word_count: int = 800) -> str:
    """Builds a detailed and effective prompt for the LLM."""
    # ... (This function remains unchanged)
    prompt = f"""
    Your task is to generate a high-quality, comprehensive article about the given topic.
    Topic: "{topic}"
    Requirements:
    - Write an engaging, informative article that provides real value to readers
    - Use clear, hierarchical structure with H1, H2 and H3 headers
    - Include a compelling introduction that hooks the reader
    - Add a strong conclusion with a call-to-action
    - Maintain a professional yet engaging tone throughout
    - Target length: Approximately {word_count} words
    - Use HTML formatting for structure (<h2>, <h3>, <p>, <ul>, <li>, etc.)
    - Include relevant keywords naturally without keyword stuffing
    - Provide actionable insights and practical advice
    - Use examples and specific details where appropriate
    - Ensure content is original and not generic
    - Only include the body and not the whole html document. Do not include any markdown or other formatting like backticks etc.
    Structure Guidelines:
    1. Start with an engaging introduction (1-2 paragraphs)
    2. Use 3-5 main sections with H2 headers
    3. Include subsections with H3 headers where needed
    4. Add bullet points or numbered lists for easy scanning
    5. End with a strong conclusion and call-to-action
    6. Do not hang in between without finishing the article as per the target length mentioned above.
    Do not mention AI, artificial intelligence, or that this content was generated by a bot.
    Write as if you are a knowledgeable expert in the field.
    """
    return prompt


def generate_content(prompt: str) -> str:
    """Sends the prompt to the AI/ML API and returns the raw text response."""
    # ... (This function remains unchanged)
    try:
        base_url = "https://api.aimlapi.com/v1"
        API_KEY = os.getenv("AIML_API_KEY")
        if not API_KEY:
            raise ValueError("API key not found. Please set the AIML_API_KEY in the sidebar.")
        selected_model = os.getenv("SELECTED_MODEL", "openai/gpt-5-chat-latest")
        system_prompt = "You are an expert content creator and SEO specialist."
        api = OpenAI(api_key=API_KEY, base_url=base_url)
        completion = api.chat.completions.create(
            model=selected_model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt},
            ],
            max_tokens=10000
        )
        response = completion.choices[0].message.content
        return response
    except Exception as e:
        print(f"An error occurred during content generation: {e}")
        raise e


# --- NEW: Image Generation Function ---
def generate_image(prompt: str) -> str | None:
    """
    Generates an image using the AIMLAPI and returns the image URL.
    """
    try:
        API_KEY = os.getenv("AIML_API_KEY")
        if not API_KEY:
            raise ValueError("API key not found for image generation.")

        url = "https://api.aimlapi.com/v1/images/generations"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}"
        }
        # A more descriptive prompt for image generation
        image_prompt = f"A high-quality, professional photograph for a contents and blog article about '{prompt}'. Cinematic, playful, sharp focus, vibrant colors."

        payload = {
            "model": "flux-pro",
            "prompt": image_prompt,
            "n": 1,
            "image_size":{
                "width": 1200,
                "height": 628
            },
            "response_format": "url",
            "convert_base64_to_url": True,
        }

        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()  # Raise an exception for bad status codes

        data = response.json()
        image_url = data['images'][0]['url']
        return image_url

    except Exception as e:
        print(f"An error occurred during image generation: {e}")
        return None